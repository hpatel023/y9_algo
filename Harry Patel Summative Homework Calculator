import os
import datetime
import time
from tkinter import *
import time
import os
from tkinter import messagebox
import turtle
import datetime
import time


 
creds = 'tempfile.temp' 
 
def Signup(): 
    global pwordE 
    global nameE
    global roots
 
    roots = Tk() 
    roots.title('Signup') 
    intruction = Label(roots, text='Please Enter new Credentials\n') 
    intruction.grid(row=0, column=0, sticky=E) 
 
    nameL = Label(roots, text='New Username: ') 
    pwordL = Label(roots, text='New Password: ') 
    nameL.grid(row=1, column=0, sticky=W) 
    pwordL.grid(row=2, column=0, sticky=W) 
 
    nameE = Entry(roots) 
    pwordE = Entry(roots, show='*') 
    nameE.grid(row=1, column=1) 
    pwordE.grid(row=2, column=1) 
 
    signupButton = Button(roots, text='Signup', command=FSSignup) 
    signupButton.grid(columnspan=2, sticky=W)
    roots.mainloop() 
 
def FSSignup():
    with open(creds, 'w') as f: 
        f.write(nameE.get()) 
        f.write('\n') 
        f.write(pwordE.get())
        f.close() 
 
    roots.destroy() 
    Login() 
 
def Login():
    global nameEL
    global pwordEL 
    global rootA
 
    rootA = Tk() 
    rootA.title('Login') 
 
    intruction = Label(rootA, text='Please Login\n') 
    intruction.grid(sticky=E) 
 
    nameL = Label(rootA, text='Username: ') 
    pwordL = Label(rootA, text='Password: ') 
    nameL.grid(row=1, sticky=W)
    pwordL.grid(row=2, sticky=W)
 
    nameEL = Entry(rootA) 
    pwordEL = Entry(rootA, show='*')
    nameEL.grid(row=1, column=1)
    pwordEL.grid(row=2, column=1)
 
    loginB = Button(rootA, text='Login', command=CheckLogin) 
    loginB.grid(columnspan=2, sticky=W)
 
    rmuser = Button(rootA, text='Delete User', fg='red', command=DelUser) 
    rmuser.grid(columnspan=2, sticky=W)
    rootA.mainloop()
 
def CheckLogin():
    with open(creds) as f:
        data = f.readlines() 
        uname = data[0].rstrip() 
        pword = data[1].rstrip() 
 
    if nameEL.get() == uname and pwordEL.get() == pword: 
        r = Tk() 
        r.title('Welcome to Homework Calculator')
        r.geometry('1500x1000') 
        rlbl = Label(r, text='Login was a great success, greatness awaits!')
        rlbl.grid(row = 0, column = 5)
        Label(r, text="High Priority Homework").grid(row=3)
        Label(r, text="High Priority Homework").grid(row=4)
        Label(r, text="High Priority Homework").grid(row=5)
        Label(r, text="Medium Priority Homework").grid(row=6)
        Label(r, text="Medium Priority Homework").grid(row=7)
        Label(r, text="Medium Priority Homework").grid(row=8)
        Label(r, text="Low Priority Homework").grid(row=9)
        Label(r, text="Low Priority Homework").grid(row=10)
        Label(r, text="Low Priority Homework").grid(row=11)
        Label(r, text="Upoming Test").grid(row=12)
        Label(r, text="Upoming Test").grid(row=13)
        Label(r, text="Upoming Assignments").grid(row=14)
        Label(r, text="Upoming Assignments").grid(row=15)
        Label(r, text="Upoming Assignments").grid(row=16)
        Label(r, text="Upoming Assignments").grid(row=17)

        r1 = Entry(r)
        r2 = Entry(r)
        r3 = Entry(r)
        r4 = Entry(r)
        r5 = Entry(r)
        r6 = Entry(r)
        r7 = Entry(r)
        r8 = Entry(r)
        r9 = Entry(r)
        r10 = Entry(r)
        r11 = Entry(r)
        r12 = Entry(r)
        r13 = Entry(r)
        r14 = Entry(r)
        r15 = Entry(r)

        r1.grid(row=3, column=1)
        r2.grid(row=4, column=1)
        r3.grid(row=5, column=1)
        r4.grid(row=6, column=1)
        r5.grid(row=7, column=1)
        r6.grid(row=8, column=1)
        r7.grid(row=9, column=1)
        r8.grid(row=10, column=1)
        r9.grid(row=11, column=1)
        r10.grid(row=12, column=1)
        r11.grid(row=13, column=1)
        r12.grid(row=14, column=1)
        r13.grid(row=15, column=1)
        r14.grid(row=16, column=1)
        r15.grid(row=17, column=1)

        Label(r, text="Time Required").grid(row=3,column=3)
        Label(r, text="Time Required").grid(row=4, column=3)
        Label(r, text="Time Required").grid(row=5, column=3)
        Label(r, text="Time Required").grid(row=6, column=3)
        Label(r, text="Time Required").grid(row=7, column=3)
        Label(r, text="Time Required").grid(row=8, column=3)
        Label(r, text="Time Required").grid(row=9, column=3)
        Label(r, text="Time Required").grid(row=10, column=3)
        Label(r, text="Time Required").grid(row=11, column=3)
        Label(r, text="Time Required").grid(row=12, column=3)
        Label(r, text="Time Required").grid(row=13, column=3)
        Label(r, text="Time Required").grid(row=14, column=3)
        Label(r, text="Time Required").grid(row=15, column=3)
        Label(r, text="Time Required").grid(row=16, column=3)
        Label(r, text="Time Required").grid(row=17, column=3)

        r1 = Entry(r)
        r2 = Entry(r)
        r3 = Entry(r)
        r4 = Entry(r)
        r5 = Entry(r)
        r6 = Entry(r)
        r7 = Entry(r)
        r8 = Entry(r)
        r9 = Entry(r)
        r10 = Entry(r)
        r11 = Entry(r)
        r12 = Entry(r)
        r13 = Entry(r)
        r14 = Entry(r)
        r15 = Entry(r)

        r1.grid(row=3, column=4)
        r2.grid(row=4, column=4)
        r3.grid(row=5, column=4)
        r4.grid(row=6, column=4)
        r5.grid(row=7, column=4)
        r6.grid(row=8, column=4)
        r7.grid(row=9, column=4)
        r8.grid(row=10, column=4)
        r9.grid(row=11, column=4)
        r10.grid(row=12, column=4)
        r11.grid(row=13, column=4)
        r12.grid(row=14, column=4)
        r13.grid(row=15, column=4)
        r14.grid(row=16, column=4)
        r15.grid(row=17, column=4)

        
        def drawclock(radius,hours,minutes,length,color):
            turtle.pensize(3)
            turtle.penup()
            turtle.goto(0,radius)
            turtle.pendown()
            turtle.fillcolor(color)
            turtle.pencolor("darkgray")
            turtle.begin_fill()
            for degree in range(0,360,360//minutes):
                turtle.circle(-radius,360//minutes)
                turtle.right(90)
                turtle.forward(length/3)
                turtle.back(length/3)
                turtle.left(90)
            turtle.end_fill()
            turtle.pencolor("black")
            for degree in range(0,360,360//hours):
                turtle.circle(-radius,360//hours)
                turtle.right(90)
                turtle.forward(length)
                turtle.back(length)
                turtle.left(90)
            turtle.circle(-radius)

        def drawhand(angle, radius, width, color, outline=False):
            if outline:
                turtle.pencolor("black")
            else:
                turtle.pencolor(color)
            turtle.pensize(2)
            turtle.penup()
            turtle.home()
            turtle.fillcolor(color)
            turtle.begin_fill()
            turtle.left(90)
            turtle.right(angle)
            turtle.forward(radius)
            turtle.pendown()
            turtle.left(150)
            turtle.forward(width)
            turtle.home()
            turtle.left(90)
            turtle.right(angle)
            turtle.penup()
            turtle.forward(radius)
            turtle.pendown()
            turtle.right(150)
            turtle.forward(width)
            turtle.home()
            turtle.end_fill()

        radius=200
        turtle.speed(0)
        turtle.hideturtle()
        turtle.title("Analog Clock")
        drawclock(radius,12,60,radius*.1,"lightgray")
        current_time=datetime.datetime.now().time()
        turtle.title(current_time.strftime("%H:%M Analog Clock"))
        drawhand(current_time.minute * 6, radius * .9, radius // 10, "red")
        drawhand(((current_time.hour + current_time.minute / 60) % 12) * 30, radius * .6, radius // 10, "blue")

        while True:
            new_time=datetime.datetime.now().time()
            if current_time.minute is not new_time.minute:
                turtle.title(new_time.strftime("%H:%M Analog Clock"))
                drawhand(current_time.minute * 6, radius * .9, radius // 10, "lightgray")
                drawhand(((current_time.hour + current_time.minute / 60) % 12) * 30, radius * .6, radius // 10, "lightgray")
                drawhand(new_time.minute * 6, radius * .9, radius // 10, "gray")
                drawhand(((new_time.hour + new_time.minute / 60) % 12) * 30, radius * .6, radius // 10, "black")
            current_time=new_time
            time.sleep(60)

    

       
        r.mainloop()
 
    else:
        r = Tk()
        r.title('Please try again')
        r.geometry('200x50')
        rlbl = Label(r, text='Nice Try')
        rlbl.pack()
        r.mainloop()
def DelUser():
    os.remove(creds) 
    rootA.destroy() 
    Signup() 
 
if os.path.isfile(creds):
    Login()
else: 
    Signup()


    
root = Tk()
my_gui = MyFirstGUI(root)
root.mainloop()
